{"ast":null,"code":"export const signIn = (credentials, newUser) => {\n  return (dispatch, getState, {\n    getFirebase\n  }) => {\n    //Logs user in\n    const firebase = getFirebase();\n    firebase.auth().signInWithEmailAndPassword(credentials.email, credentials.password).then(resp => {\n      return firestore.collection('users').doc(resp.user.uid).set({\n        initials: newUser.firstName[0] + newUser.lastName[0]\n      });\n    }).then(() => {\n      dispatch({\n        type: 'LOGIN_SUCCESS'\n      });\n    }).catch(err => {\n      dispatch({\n        type: 'LOGIN_ERROR',\n        err\n      });\n    });\n  };\n};\nexport const signOut = () => {\n  return (dispatch, getState, {\n    getFirebase\n  }) => {\n    const firebase = getFirebase();\n    firebase.auth().signOut().then(() => {\n      dispatch({\n        type: 'SIGNOUT_SUCCESS'\n      });\n    });\n  };\n};\nexport const signUp = newUser => {\n  return (dispatch, getState, {\n    getFirebase,\n    getFirestore\n  }) => {\n    const firebase = getFirebase();\n    const firestore = getFirestore();\n    firebase.auth().createUserWithEmailAndPassword(newUser.email, newUser.password).then(resp => {\n      return firestore.collection('users').doc(resp.user.uid).set({\n        firstName: newUser.firstName,\n        lastName: newUser.lastName,\n        initials: newUser.firstName[0] + newUser.lastName[0]\n      });\n    }).then(() => {\n      dispatch({\n        type: 'SIGNUP_SUCCESS'\n      });\n    }).catch(err => {\n      dispatch({\n        type: 'SIGNUP_ERROR',\n        err\n      });\n    });\n  };\n};","map":{"version":3,"sources":["C:/Users/DELL/Documents/5.Programming/NetNinja/React-Redux-app/marioplan/src/store/actions/authActions.js"],"names":["signIn","credentials","newUser","dispatch","getState","getFirebase","firebase","auth","signInWithEmailAndPassword","email","password","then","resp","firestore","collection","doc","user","uid","set","initials","firstName","lastName","type","catch","err","signOut","signUp","getFirestore","createUserWithEmailAndPassword"],"mappings":"AAAA,OAAO,MAAMA,MAAM,GAAG,CAACC,WAAD,EAAaC,OAAb,KAAyB;AAC3C,SAAM,CAACC,QAAD,EAAWC,QAAX,EAAoB;AAACC,IAAAA;AAAD,GAApB,KAAsC;AACxC;AACA,UAAMC,QAAQ,GAAGD,WAAW,EAA5B;AAEAC,IAAAA,QAAQ,CAACC,IAAT,GAAgBC,0BAAhB,CACIP,WAAW,CAACQ,KADhB,EAEIR,WAAW,CAACS,QAFhB,EAGEC,IAHF,CAGOC,IAAI,IAAG;AACV,aAAOC,SAAS,CAACC,UAAV,CAAqB,OAArB,EAA8BC,GAA9B,CAAkCH,IAAI,CAACI,IAAL,CAAUC,GAA5C,EAAiDC,GAAjD,CAAqD;AACxDC,QAAAA,QAAQ,EAACjB,OAAO,CAACkB,SAAR,CAAkB,CAAlB,IAAuBlB,OAAO,CAACmB,QAAR,CAAiB,CAAjB;AADwB,OAArD,CAAP;AAGH,KAPD,EAOGV,IAPH,CAOQ,MAAI;AACRR,MAAAA,QAAQ,CAAC;AAACmB,QAAAA,IAAI,EAAE;AAAP,OAAD,CAAR;AAEH,KAVD,EAUGC,KAVH,CAUUC,GAAD,IAAS;AACdrB,MAAAA,QAAQ,CAAC;AAACmB,QAAAA,IAAI,EAAE,aAAP;AAAqBE,QAAAA;AAArB,OAAD,CAAR;AACH,KAZD;AAaH,GAjBD;AAkBH,CAnBM;AAoBP,OAAO,MAAMC,OAAO,GAAG,MAAM;AACzB,SAAO,CAACtB,QAAD,EAAUC,QAAV,EAAmB;AAACC,IAAAA;AAAD,GAAnB,KAAmC;AACtC,UAAMC,QAAQ,GAAGD,WAAW,EAA5B;AAEAC,IAAAA,QAAQ,CAACC,IAAT,GAAgBkB,OAAhB,GAA0Bd,IAA1B,CAA+B,MAAI;AAC/BR,MAAAA,QAAQ,CAAC;AAACmB,QAAAA,IAAI,EAAC;AAAN,OAAD,CAAR;AACH,KAFD;AAGH,GAND;AAOH,CARM;AASP,OAAO,MAAMI,MAAM,GAAIxB,OAAD,IAAa;AAC/B,SAAO,CAACC,QAAD,EAAUC,QAAV,EAAmB;AAACC,IAAAA,WAAD;AAAasB,IAAAA;AAAb,GAAnB,KAAkD;AACrD,UAAMrB,QAAQ,GAAGD,WAAW,EAA5B;AACA,UAAMQ,SAAS,GAAGc,YAAY,EAA9B;AAEArB,IAAAA,QAAQ,CAACC,IAAT,GAAgBqB,8BAAhB,CACI1B,OAAO,CAACO,KADZ,EAEIP,OAAO,CAACQ,QAFZ,EAGEC,IAHF,CAGOC,IAAI,IAAG;AACV,aAAOC,SAAS,CAACC,UAAV,CAAqB,OAArB,EAA8BC,GAA9B,CAAkCH,IAAI,CAACI,IAAL,CAAUC,GAA5C,EAAiDC,GAAjD,CAAqD;AACxDE,QAAAA,SAAS,EAAClB,OAAO,CAACkB,SADsC;AAExDC,QAAAA,QAAQ,EAAEnB,OAAO,CAACmB,QAFsC;AAGxDF,QAAAA,QAAQ,EAACjB,OAAO,CAACkB,SAAR,CAAkB,CAAlB,IAAuBlB,OAAO,CAACmB,QAAR,CAAiB,CAAjB;AAHwB,OAArD,CAAP;AAKH,KATD,EASGV,IATH,CASQ,MAAM;AACVR,MAAAA,QAAQ,CAAC;AAACmB,QAAAA,IAAI,EAAE;AAAP,OAAD,CAAR;AACH,KAXD,EAWGC,KAXH,CAWUC,GAAD,IAAQ;AACbrB,MAAAA,QAAQ,CAAC;AAACmB,QAAAA,IAAI,EAAC,cAAN;AAAqBE,QAAAA;AAArB,OAAD,CAAR;AACH,KAbD;AAcH,GAlBD;AAmBH,CApBM","sourcesContent":["export const signIn = (credentials,newUser) => {\r\n    return(dispatch, getState,{getFirebase}) => {\r\n        //Logs user in\r\n        const firebase = getFirebase();\r\n\r\n        firebase.auth().signInWithEmailAndPassword(\r\n            credentials.email,\r\n            credentials.password\r\n        ).then(resp =>{\r\n            return firestore.collection('users').doc(resp.user.uid).set({\r\n                initials:newUser.firstName[0] + newUser.lastName[0]\r\n            });\r\n        }).then(()=>{\r\n            dispatch({type: 'LOGIN_SUCCESS'});\r\n        \r\n        }).catch((err) => {\r\n            dispatch({type: 'LOGIN_ERROR',err});\r\n        });\r\n    }\r\n}\r\nexport const signOut = () => {\r\n    return (dispatch,getState,{getFirebase})=>{\r\n        const firebase = getFirebase();\r\n\r\n        firebase.auth().signOut().then(()=>{\r\n            dispatch({type:'SIGNOUT_SUCCESS'})\r\n        })\r\n    }\r\n}\r\nexport const signUp = (newUser) => {\r\n    return (dispatch,getState,{getFirebase,getFirestore}) => {\r\n        const firebase = getFirebase();\r\n        const firestore = getFirestore();\r\n\r\n        firebase.auth().createUserWithEmailAndPassword(\r\n            newUser.email,\r\n            newUser.password\r\n        ).then(resp =>{\r\n            return firestore.collection('users').doc(resp.user.uid).set({\r\n                firstName:newUser.firstName,\r\n                lastName: newUser.lastName,\r\n                initials:newUser.firstName[0] + newUser.lastName[0]\r\n            });\r\n        }).then(() => {\r\n            dispatch({type: 'SIGNUP_SUCCESS'});\r\n        }).catch((err)=> {\r\n            dispatch({type:'SIGNUP_ERROR',err});\r\n        })\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}